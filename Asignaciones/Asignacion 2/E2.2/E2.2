#include<iostream>
#include<vector>
#include<string>
#include<ctime>

// Incluimos el namespace std. 
using namespace std;

//Declaramos las funciones que usaremos en este programa. 
bool uniqueCrystalVerification(vector<string> itemList);
void openInventory(vector<string> &inventory, vector<string>& Objetos);
void opaqueCraftMenu(vector<string> &inventory);
bool createOpaque(string rawCrystal, vector<string> inventory);
void replace(string rawCrystal, string opaqueCrystal, vector<string> &inventory);
void recoleccion(vector<string>& inventario, vector<string> PosibleItems, int Max);
bool isCrystal(int position, vector<string> Items);


//Funcion para verificar si el "item" en el vector en la posicion indicada es un "cristal"
bool isCrystal(int position, vector<string> Items)
{
	if (Items[position] == "Crystallized Azure Dragon's Tears" || Items[position] == "Crystallized Exiled Heretic's Bone" || Items[position] == "Crystallized Great Feline's Ash"
		|| Items[position] == "Opaque Azure Dragon's Sapphire" || Items[position] == "Opaque Humanity's Emerald" || Items[position] == "Opaque Feline's Ruby")
	{

		return true;
	}
	else
	{
		return false;
	}


}


//Mi version del generador de inventario
void MygenerateInventory(vector<string> &inventory)
{
	
	const int Numero_Objetos_Generados = 7;

	inventory.clear();
	//Dos vectores uno para los items normales y otro para los cristales
	const vector<string> Items = { "Fishermen's Plate", "Iron Plate" };
	const vector<string> Crystals = { "Crystallized Azure Dragon's Tears", "Crystallized Exiled Heretic's Bone", "Crystallized Great Feline's Ash" };

	//Definimos las variables para el uso del rand() para cada vector
	int randomItemPos;
	int ItemsMin = 0;
	int ItemsMax = Items.size() - 1;

	int RandomCrystalPos;
	int CrystalMin = 0;
	int CrystalMax = Crystals.size() - 1;

	//Varible boolean que indica si garatiza el cristal
	bool containsCrystal = false;


	//Declaramos una variable booleana para el control de Fishermen's Plates.
	bool shortBooleanExpression;

	//Declaramos una variable contador para el ciclo while. 
	int counter = 0;

	//Creamos el ciclo que llena el inventario "random". 
	while (counter < Numero_Objetos_Generados) {

		
		if (!containsCrystal) //Para garantizar el cristal, una vez el cristal se "entregue" procedemos a entregar los objetos normales
		{
			RandomCrystalPos = rand() % (CrystalMax - CrystalMin + 1) + CrystalMin;
			inventory.push_back(Crystals[RandomCrystalPos]);
			containsCrystal = true;
			counter++;
		}
		else
		{
			//Generamos la posición "random".
			randomItemPos = rand() % (ItemsMax - ItemsMin + 1) + ItemsMin;

			//Si hay tres o más Fisherme's Plate en el inventario Y el item random es un Fisherme's Plate, esta variable tomará el valor de true. 
			shortBooleanExpression = (count(inventory.begin(), inventory.end(), "Fishermen's Plate") >= 3) && (Items[randomItemPos] == "Fishermen's Plate");


			if (!shortBooleanExpression)
			{

				inventory.push_back(Items[randomItemPos]);
				counter++; //El counter solo se aumenta cuando se haya agregado algo al inventario. 

			}
		}
	}

	system("CLS");
	cout << "INVENTORY GENERATED! \n\n" << endl;
	system("pause"); //Para esperar que el usuario presione alguna tecla. 

	
}



//Creamos una función que verifique si ya existe un cristal en la lista pasada como argumento. 
bool uniqueCrystalVerification(vector<string> itemList)
{

	//Declaramos una variable counter por motivos prácticos. 
	int counter = 0;

	//Declaramos una variable que "diga" si hay un cristal en la lista pasada. 
	bool isCrystalPresent = false;

	//Declaramos el "longBooleanExpression". 
	bool longBooleanExpression;

	//Creamos el ciclo que verifica si hay un cristal en el vector (en la lista).
	while ((counter < itemList.size()) && (!isCrystalPresent)) {

		//Verificamos si hay alguno de los cristales en la lista de objetos. 
		longBooleanExpression = (itemList[counter] == "Crystallized Azure Dragon's Tears") || (itemList[counter] == "Crystallized Exiled Heretic's Bone") || (itemList[counter] == "Crystallized Great Feline's Ash");

		//Si hay un cristal, entonces cambiamos el valor de "isCrystalPresent" a "true".
		if (longBooleanExpression) {
			isCrystalPresent = true;
		}

		//Aumentamos el counter (ya que el while no lo hace solo).
		counter++;

	}

	return isCrystalPresent;

}

//Creamos una función para ver el inventario y tirar objetos del mismo. 
void openInventory(vector<string> &inventory, vector<string> &Objetos)
{
	int YesNoInput;

	//Declaramos la variable que mantiene el inventario abierto. 
	bool inventoryOpened = true;

	//Declaramos la variable para la entrada del usuario. 
	int userInput;
	

	//Creamos el ciclo que nos mantiene el inventario abierto. 
	while (inventoryOpened) {

		//Encabezado. 
		system("CLS");
		cout << "===============================================================" << endl;
		cout << "= = INVENTORY = =" << "\n" << endl;

		//Creamos el ciclo que itera sobre el inventario para imprimirlo (mostrarlo en pantalla).
		for (int counter = 0; counter < inventory.size(); counter++) {

			cout << counter + 1 << ". " << inventory[counter] << endl;

		}

		//Creamos la opción EXIT.
		cout << endl << "0. EXIT" << endl;
		cout << "===============================================================" << endl;

		//Esperamos la entrada del usuario.
		cout << "AWAITING USER INPUT:  "; cin >> userInput;

		//Si el usuario introduce el número de algún item, entonces borra el item usando erase(). De otra forma, cierra el inventory. 
		if (userInput <= inventory.size() && userInput > 0) {

			if (isCrystal(userInput - 1, inventory)) 
			{
				system("cls");
				cout << "Are you sure you want to destroy this crystal? You won’t be able to gather this unique crystal anymore" << endl << endl;
				cout << "1.YES     2.NO" << endl << endl;
				cout << "AWAITING USER INPUT:  "; cin >> YesNoInput;

				if (YesNoInput == 1)
				{
					for (int i = 0; i < Objetos.size(); i++)
					{
						if (Objetos[i] == inventory[userInput - 1])
							Objetos.erase(Objetos.begin() + i);
					}
						
					inventory.erase(inventory.begin() + userInput - 1);

				}
			}
			else
			{
				inventory.erase(inventory.begin() + userInput - 1);
			}


		}
		else if (userInput == 0) {

			inventoryOpened = false;

		}

	}


}

void opaqueCraftMenu(vector<string> &inventory)
{

	//Declaro la variable que mantiene el inventario abierto.
	bool craftMenuOpen = true;

	//Declaro la variable para la entrada del usuario
	int craftMenuOption;

	while (craftMenuOpen) {

		//Declaro dos variables que serán útiles para "craftear" los items. 
		string rawCrystal = "NA";
		string opaqueCrystal = "NA";

		//Declaro la variable para saber si se puede crear el cristal deseado. 
		bool isCrafted = false;

		//Creamos el UI.
		system("CLS");
		cout << "===============================================================" << endl;
		cout << "= = OPAQUE CRYSTAL CRAFTING = =" << "\n" << endl;
		cout << "1. Opaque Azure Dragon's Sapphire" << endl;
		cout << "2. Opaque Humanity's Emerald" << endl;
		cout << "3. Opaque Feline's Ruby" << endl;
		cout << "4. Exit" << endl;
		cout << "===============================================================" << endl;

		//Esperamos la entrada del usuario.
		cout << "AWAITING USER INPUT:  "; cin >> craftMenuOption;

		//Controlamos el menú usando un switch. 
		switch (craftMenuOption) {

		case 1:
			rawCrystal = "Crystallized Azure Dragon's Tears";
			opaqueCrystal = "Opaque Azure Dragon's Sapphire";
			isCrafted = createOpaque(rawCrystal, inventory);
			break;

		case 2:
			rawCrystal = "Crystallized Exiled Heretic's Bone";
			opaqueCrystal = "Opaque Humanity's Emerald";
			isCrafted = createOpaque(rawCrystal, inventory);
			break;

		case 3:
			rawCrystal = "Crystallized Great Feline's Ash";
			opaqueCrystal = "Opaque Feline's Ruby";
			isCrafted = createOpaque(rawCrystal, inventory);
			break;

		case 4:
			craftMenuOpen = false;
			break;

		default:
			system("CLS");
			break;
		}

		//Solo hará el cambio al inventario si se ha creado algo.
		if (isCrafted) {

			replace(rawCrystal, opaqueCrystal, inventory);
			cout << "Opaque crystal crafted!" << endl;
			system("pause");

		}

	}


}


//Función que se encarga de verificar si existe el cristal adecuado en el inventario.
bool createOpaque(string rawCrystal, vector<string> inventory)
{

	bool isCrafted = false;

	if (find(inventory.begin(), inventory.end(), rawCrystal) != inventory.end()) {

		isCrafted = true;

	}

	return isCrafted;

}

//Función que se encarga de reemplazar el rawCrystal por el opaqueCrystal. 
void replace(string rawCrystal, string opaqueCrystal, vector<string> &inventory) {

	int counter = 0;
	bool replaced = false;

	while (counter < inventory.size() && !replaced) {

		if (inventory[counter] == rawCrystal)
		{

			inventory[counter] = opaqueCrystal;
			replaced = true;

		}

		counter++;

	}

}


//Funcion encargada de desplegar el menu de recoleccion, etc...
void recoleccion(vector<string> &inventario, vector<string> PosibleItems, int Max)
{
	bool RecoleccionMenu = true;
	int input;


	vector<string> RandomList;

	int RandomObj;
	int RandomMin = 0;
	int RandomMax = PosibleItems.size() - 1;

	for (int i = 0; i < 5; i++)
	{
		RandomObj = rand() % (RandomMax - RandomMin + 1) + RandomMin;
		RandomList.push_back(PosibleItems[RandomObj]);
	}


	while (RecoleccionMenu) 
	{
		bool InventoryCrystal = uniqueCrystalVerification(inventario);

		system("cls");
		cout << "HARVESTING" << endl << endl;
		for (int i = 0; i < RandomList.size(); i++)
			cout << i + 1 << ". " << RandomList[i] << endl;

		cout << endl << "0. Exit " << endl << endl;
		cout << "Inventory space: " << inventario.size() << " of " << Max << endl << endl;
		cout << "Waiting input: "; cin >> input;

		if (input == 0)
		{
			RecoleccionMenu = false;
		}
		else if (input <= RandomList.size() && input > 0)
		{
			if (inventario.size() >= Max)
			{
				system("cls");
				cout << "INVENTORY FULL." << endl << endl;
				system("pause");
			}
			else
			{
				if (isCrystal(input - 1, RandomList) && InventoryCrystal)
				{
					system("cls");
					cout << "You can not have more than one crystal in your inventory." << endl << endl;
					system("pause");

				}
				else
				{
					inventario.push_back(RandomList[input - 1]);
					RandomList.erase(RandomList.begin() + input - 1);
				}
			}

		}
		
	}


	

}




int main()
{

	//RANDOM SEED.
	srand(time(0));

	//Todos los posibles items que estan en el juego
	vector<string> Objetos{ "Crystallized Azure Dragon's Tears", "Crystallized Exiled Heretic's Bone", "Crystallized Great Feline's Ash", "Fishermen's Plate", "Iron Plate" };

	//Creamos un vector para el inventario. 
	vector<string> inventory;
	const int inventoryMax = 20;

	//Creamos una variable bool para mantener el menú funcionando. 
	bool menuOpen = true;

	//Creamos la variable para la entrada del usuario. 
	int mainMenuOption;

	//Usamos un ciclo while para mantener el menú funcionando. 
	while (menuOpen) {

		//Este comando limpia la ventana de comandos. 
		system("CLS");

		//Creamos el "UI" para el menú.
		cout << "===============================================================" << endl;
		cout << "= = MAIN MENU = =" << "\n" << endl;
		cout << "1. INVENTORY GENERATOR (FOR DEVELOPERS)" << endl;
		cout << "2. OPEN INVENTORY" << endl;
		cout << "3. CREATE OPAQUE CRYSTAL" << endl;
		cout << "4. HARVEST ITEM" << endl;
		cout << "5. EXIT GAME" << endl;
		cout << "===============================================================" << endl;

		//Leemos la entrada del usuario. 
		cout << "AWAITING USER INPUT:  "; cin >> mainMenuOption;

		//Usamos un switch() para manejar el menú con la entrada del usuario.
		switch (mainMenuOption) {

		case 1:
			MygenerateInventory(inventory);
			break;

		case 2:
			openInventory(inventory,Objetos);
			break;

		case 3:
			opaqueCraftMenu(inventory);
			break;

		case 4:
			recoleccion(inventory, Objetos, inventoryMax);
			break;

		case 5:
			menuOpen = false;
			break;

		default:
			system("CLS");
			break;

		}


	}

	return 0;

}
